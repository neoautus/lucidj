#!/bin/formulae-handler
Formulae-Version: 1.0.0
Content-Type: multipart/mixed; boundary=-------THINK_BIG_BE_BOLD-------

-------THINK_BIG_BE_BOLD-------
View-Mode: canvas-only
Runtime-Class: xyz.kuori.notebook.MarkDownParser
Instance-Class: xyz.kuori.notebook.SmartBox; ref=5f972896
Content-Type: text/plain

# Demonstração de células
It's very easy to make some words **bold** and other words *italic* with Markdown. You can even [link to Google!](http://google.com)
## Testando fórmulas
Você pode testar a execução de comandos agora mesmo, na célula abaixo. Clique nela e tecle Shift+Enter:

-------THINK_BIG_BE_BOLD-------
Runtime-Class: xyz.kuori.notebook.BeanShellInterpreter
Instance-Class: xyz.kuori.notebook.SmartBox; ref=595a95d2
Content-Type: text/plain

print (2+2);
-------THINK_BIG_BE_BOLD-------
View-Mode: canvas-only
Runtime-Class: xyz.kuori.notebook.MarkDownParser
Instance-Class: xyz.kuori.notebook.SmartBox; ref=53c82637
Content-Type: text/plain

Qualquer fórmula que você entrou, será processada imediatamente.

Este é um excelente meio de testar novo código rapidamente, sem muita dor de cabeça.
Veja abaixo um teste usando **expressões regulares**:
-------THINK_BIG_BE_BOLD-------
Runtime-Class: xyz.kuori.notebook.BeanShellInterpreter
Instance-Class: xyz.kuori.notebook.SmartBox; ref=358cc348; xref=6e221442
Content-Type: text/plain

//s = "formulas:regex/view-mode-single/0";
//s = "formulas:regex/view-mode-single/0";
//s = "formulas'232332'SQSQ";
s = "A~BC~FGH~~zuzy|XX~ 1234~ ~~ABC~01/01/2010 06:30~BCD~01/01/2011 07:45";
print ("s = " + s);
p = java.util.regex.Pattern.compile(".*XX~ (\\d{3,4}).*(\\d{1,2}:\\d{2}).*(\\d{1,2}:\\d{2})");
m = p.matcher(s);
print ("matches = " + m.matches());
print ("groupCount() = " + m.groupCount());
for (i = 0; i < m.groupCount() + 1; i++)
{
    print ("group[" + i + "] = '" + m.group(i) + "'");
}
-------THINK_BIG_BE_BOLD-------
Runtime-Class: xyz.kuori.notebook.BeanShellInterpreter
Instance-Class: xyz.kuori.notebook.SmartBox; ref=3a667df6; xref=60489a6c
Content-Type: text/plain

editor = new AceEditor();

-------THINK_BIG_BE_BOLD-------
Runtime-Class: xyz.kuori.notebook.BeanShellInterpreter
Instance-Class: xyz.kuori.notebook.SmartBox; ref=4ad1c0d7; xref=741d89a5
Content-Type: text/plain

//s = "formulas/regex/view-mode-single/0";
s = "formulas/hjhjhjhjh/aaaaaaa";
print ("s = " + s);
p = java.util.regex.Pattern.compile("(formulas/?[^/]*).*");
m = p.matcher(s);
print ("matches = " + m.matches());
print ("groupCount() = " + m.groupCount());
for (i = 0; i < m.groupCount() + 1; i++)
{
    print ("group[" + i + "] = '" + m.group(i) + "'");
}
-------THINK_BIG_BE_BOLD-------
Content-Type: application/java-serialized-object
Content-Transfer-Encoding: base64
Instance-Class: xyz.kuori.notebook.Deserializer
Instance-Ref: 5f972896; target=setResultCache

AwHcBzxoMT48YSBocmVmPSIjZGVtb25zdHJhw6fDo28tZGUtY8OpbHVsYXMiIG5hbWU9ImRlbW9u
c3RyYcOnw6NvLWRlLWPDqWx1bGFzIj5EZW1vbnN0cmHDp8OjbyBkZSBjw6lsdWxhczwvYT48L2gx
Pgo8cD5JdCZyc3F1bztzIHZlcnkgZWFzeSB0byBtYWtlIHNvbWUgd29yZHMgPHN0cm9uZz5ib2xk
PC9zdHJvbmc+IGFuZCBvdGhlciB3b3JkcyA8ZW0+aXRhbGljPC9lbT4gd2l0aCBNYXJrZG93bi4g
WW91IGNhbiBldmVuIDxhIGhyZWY9Imh0dHA6Ly9nb29nbGUuY29tIj5saW5rIHRvIEdvb2dsZSE8
L2E+PC9wPgo8aDI+PGEgaHJlZj0iI3Rlc3RhbmRvLWbDs3JtdWxhcyIgbmFtZT0idGVzdGFuZG8t
ZsOzcm11bGFzIj5UZXN0YW5kbyBmw7NybXVsYXM8L2E+PC9oMj4KPHA+Vm9jw6ogcG9kZSB0ZXN0
YXIgYSBleGVjdcOnw6NvIGRlIGNvbWFuZG9zIGFnb3JhIG1lc21vLCBuYSBjw6lsdWxhIGFiYWl4
by4gQ2xpcXVlIG5lbGEgZSB0ZWNsZSBTaGlmdCtFbnRlcjo8L3A+

-------THINK_BIG_BE_BOLD-------
Content-Type: application/java-serialized-object
Content-Transfer-Encoding: base64
Instance-Class: xyz.kuori.notebook.Deserializer
Instance-Ref: 53c82637; target=setResultCache

AwHrAzxwPlF1YWxxdWVyIGbDs3JtdWxhIHF1ZSB2b2PDqiBlbnRyb3UsIHNlcsOhIHByb2Nlc3Nh
ZGEgaW1lZGlhdGFtZW50ZS48L3A+CjxwPkVzdGUgw6kgdW0gZXhjZWxlbnRlIG1laW8gZGUgdGVz
dGFyIG5vdm8gY8OzZGlnbyByYXBpZGFtZW50ZSwgc2VtIG11aXRhIGRvciBkZSBjYWJlw6dhLjxi
ci8+VmVqYSBhYmFpeG8gdW0gdGVzdGUgdXNhbmRvIDxzdHJvbmc+ZXhwcmVzc8O1ZXMgcmVndWxh
cmVzPC9zdHJvbmc+OjwvcD4=

-------THINK_BIG_BE_BOLD---------
